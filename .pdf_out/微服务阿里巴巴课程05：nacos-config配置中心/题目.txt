=== 第 1 页 ===

微服务阿里巴巴05：nacos-config配置中心 
一、nacos-config配置中心
 
1.1、配置中心基本介绍
 
官方文档：https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config
nacos以键值对的方式，提供用于存储配置和其他元数据存储。为分布式系统中的外部化配置提供
服务器端和客户端支持，使用spring cloud alibaba naocs config可以在nacos server集中管理你
应用的外部属性配置。
1.1.1、微服务配置文件问题
 
配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散
在各个微服务中，不好统一配置和管理。
配置文件无法区分环境。微服务项目可能会有多个环境，例如：测试环境、预发布环境、生产环
境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动
维护，这比较困难。
配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一
个正在运行的项目来说是非常不友好的。
1.1.2、配置中心解决思路
 
首先把项目中各种经常变动的配置全部都放到配置中心进行统一管理，并提供一套标准的接口。
当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。
当配置中心中的各种参数有更新的时候，也能通知到各个服务实时过来同步最新的信息，使之动态
更新。
1.1.3、配置中心架构图
 
 
二、配置管理图形界面
 
启动nacos注册中心，进入浏览器，查看管理服务



=== 第 2 页 ===

 
2.1、基本配置文件管理
 
2.1.1、配置管理前置安装
 
在进行配置文件管理时，因为nacos默认使用的是自带的基于内存模式的Derby数据库，在这里我
们需要调整成我们自己的mysql数据库，具体只需要到nacos的conf目录中，配置
application.properties文件即可。
注意：需要先将nacos_config数据库创建好，否则在启动nacos时会报错。
在target目录下需要添加上mysql的驱动包（mysql-connector-java-8.0.27.jar），否则浏览
器中开不开管理页面。
创建数据库表的代码在conf目录下的mysql-schema.sql文件中已经给出了（总共应该有12张
表）。
#*************** Config Module Related Configurations ***************#
### If use MySQL as datasource:
spring.datasource.platform=mysql
### Count of DB:
db.num=1
### Connect URL of DB:
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?
characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=
true&useUnicode=true&useSSL=false&serverTimezone=UTC
db.user.0=root
db.password.0=xiaoye
 create database nacos_config;
  use nacos_config;
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = config_info   */
/******************************************/
CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',



=== 第 3 页 ===

  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) DEFAULT NULL,
  `content` longtext NOT NULL COMMENT 'content',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时
间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时
间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) DEFAULT NULL,
  `c_use` varchar(64) DEFAULT NULL,
  `effect` varchar(64) DEFAULT NULL,
  `type` varchar(64) DEFAULT NULL,
  `c_schema` text,
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` 
(`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = config_info_aggr   */
/******************************************/
CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',
  `content` longtext NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` 
(`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = config_info_beta   */
/******************************************/
CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时
间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时
间',



=== 第 4 页 ===

  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` 
(`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin 
COMMENT='config_info_beta';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = config_info_tag   */
/******************************************/
CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL COMMENT 'content',
  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时
间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时
间',
  `src_user` text COMMENT 'source user',
  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` 
(`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin 
COMMENT='config_info_tag';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = config_tags_relation   */
/******************************************/
CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` 
(`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin 
COMMENT='config_tag_relation';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = group_capacity   */
/******************************************/



=== 第 5 页 ===

CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整
个集群',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认
值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，
单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最
大个数，，0表示使用默认值',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据
的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更
历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时
间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时
间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group
容量信息表';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = his_config_info   */
/******************************************/
CREATE TABLE `his_config_info` (
  `id` bigint(20) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) NOT NULL,
  `group_id` varchar(128) NOT NULL,
  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
  `content` longtext NOT NULL,
  `md5` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text,
  `src_ip` varchar(50) DEFAULT NULL,
  `op_type` char(10) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text NOT NULL COMMENT '秘钥',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';
/******************************************/
/*   数据库全名 = nacos_config   */
/*   表名称 = tenant_capacity   */
/******************************************/
CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',



=== 第 6 页 ===

  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认
值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，
单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最
大个数',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据
的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更
历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时
间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时
间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息
表';
CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) default '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) default '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';
CREATE TABLE `users` (
    `username` varchar(50) NOT NULL PRIMARY KEY,
    `password` varchar(500) NOT NULL,
    `enabled` boolean NOT NULL
);
CREATE TABLE `roles` (
    `username` varchar(50) NOT NULL,
    `role` varchar(50) NOT NULL,
    UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE
);
CREATE TABLE `permissions` (
    `role` varchar(50) NOT NULL,
    `resource` varchar(255) NOT NULL,
    `action` varchar(8) NOT NULL,
    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING 
BTREE
);
INSERT INTO users (username, password, enabled) VALUES ('nacos', 
'$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);



=== 第 7 页 ===

 
安装完成以后就可以启动nacos，在浏览器中输入http://localhost:8848/naocs/index.html请求，
进入管理界面
 
2.1.2、创建命名空间
 
进入命名空间选项，选择新建命名空间，进行如下配置，注意：命名空间ID不填写时则自动生
成。
在创建命名空间时，一般会根据环境创建命名空间，例如dev，prod，test等。
创建完成以后可以在主界面看到新建的命名空间。
创建的命名空间会保存到 tenant_info表中。
2.1.3、创建配置信息
 
点击配置列表右边的加号，进入如下页面添加配置信息，配置完成以后点击下面的发布就完成了。
Data Id：用于区分不同项目，不同开发模式的配置，可以用点进行分隔表示。
INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');



=== 第 8 页 ===

注意：在springcloud2022版本中，配置Data Id时不能带文件类型的后缀（例
如.yml，.properties）。
group：可以针对不同的分组进行配置，默认是DEFAULT_GROUP
描述：最好真实填写该配置的开发环境以及配置用途，方便以后提醒
配置格式：我们一般使用常用的yaml格式或者properties格式。然后在黑色区域按照格式填
写配置
发布以后可以返回到主界面的配置列表中查看到刚才的配置。
 
这里的配置信息会保存到数据库的config_info表中。
2.1.4、信息回滚
 
可以进入更多-->历史记录，查看以前填写的配置信息，可以将配置信息回滚到从前的配置。



=== 第 9 页 ===

如果当前操作的是第一个版本，则回滚时会删除这个版本。
 
信息回滚的记录会保存到 his_config_info表中。
 
2.2、权限控制
 
2.2.1、开启权限控制
 
要想让权限控制生效，需要到conf/application.properties文件中进行如下配置：
修改以后最好重新启动nacos
 
 
### If turn on auth system:
nacos.core.auth.enabled=true
nacos.core.auth.server.identity.key=example
nacos.core.auth.server.identity.value=example
nacos.core.auth.plugin.nacos.token.secret.key=bmFjb3NfMjAyNDAxMTBfc2hpZ3poX2
5hY29zX3Rva2Vu



=== 第 10 页 ===

2.2.2、创建用户
 
进入权限控制-->创建用户，就可以创建用户了。
注意：在创建用户时，有时候可能需要先退出nacos用户，然后重新登录。
创建的用户信息会保存在users表中
 
2.2.3、绑定角色
 



=== 第 11 页 ===

选择角色管理-->绑定角色，然后输入角色名称和需要绑定的用户名称就可以了。其实这也是在创
建角色。
创建好角色以后会保存到roles表中。
 
2.2.4、角色授权
 
在给用户绑定角色以后，可以给角色授权，在权限管理中，我们可以选择该角色操作的命名空间，
动作也可以选择读写性。



=== 第 12 页 ===

授权完成以后，信息会保存到permissions表中。这里只是授予了public空间的读写权限，所以
xiaoye用户无法访问prod和dev空间
 
 
三、读取配置信息
 
要使用配置信息的前提条件是必须先启动nacos，否则不管怎么配置都没有意义。
3.1、快速使用配置信息
 
3.1.1、创建配置信息
 
这里配置一组信息，具体信息如下：
这组配置信息的data id为：com.baidu.config-nacos.dev，注意：不要带文件类型的后缀
所属分组(group)为：dev，注意：这里的命名空间是dev,分组也是dev,其实分组也可以使用
默认（DEFULT_GROUP）
所属命名空间为dev，命名空间id为：a0cf8c69-c46e-4be8-9207-c1eef42029c9
具体配置内容如下，文件的配置格式为yaml
server:
  port: 7777
name: xiaoye  



=== 第 13 页 ===

 
 
3.1.2、创建项目config-nacos
 
创建一个不带任何模板的maven项目，此项目需要继承springcloud-parent
3.1.3、引入依赖
 
如果要使用nacos的配置，则在需要使用的项目中添加如下依赖：
pom.xml文件的完整配置信息
因为我们在common-api项目中已经将上面的依赖进行配置了，所以只需要引入公共模块的
依赖即可。
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
</dependency>



=== 第 14 页 ===

 
3.1.4、修改配置文件
 
在resources文件夹下创建配置文件bootstrap.yml，这个配置是核心，凡是需要灵活改动的配
置，保存到配置中心，通过bootstrap.yml文件读取配置信息。
springcloud加载的时候，先加载 bootstrap.yml，后加载application.yml
如果愿意的话：可以把application.yml中的配置写到配置中心，也可以把mybatis.xml配置
写到配置中心，另外还有一些容易变更的属性资源配置也可以写到配置中心（也可以都写到
bootstrap.yml文件）。
总结：经常变化的配置写到配置中心，不变的配置写到application.yml中，最好将nacos的
相关配置都保存到 bootstrap.yml文件中。
3.1.4.1、修改application.yml
 
创建application.yml文件，并进行如下配置
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.baidu</groupId>
        <artifactId>springcloud-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>config-nacos</artifactId>
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!--引入公共模块-->
        <dependency>
            <groupId>com.baidu</groupId>
            <artifactId>common-api</artifactId>
            <version>1.0-SNAPSHOT</version>
            <!--排除依赖-->
            <exclusions>
                <exclusion>
                    <groupId>com.baomidou</groupId>
                    <artifactId>mybatis-plus-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
</project>
server:
  port: 8003



=== 第 15 页 ===

3.1.4.2、编辑bootstrap.yml
 
创建bootstrap.yml文件，并进行如下配置
项目读取配置中心的配置信息时，需要注意这四步的设置：1.命名空间id，2.DataId 的设置，
3.Group的设置，4.文件后缀默认perperties，可以改为yml。
spring.cloud.nacos.config.server-addr：表示保存配置文件所在的主机和端口地址
spring.cloud.nacos.config.namespace=命名空间id，用于指定命名空间 。
spring.application.name=DataId，注意spring.application.name和data id一定要一致。
spring.cloud.nacos.config.group：配置分组名称，默认是DEFAULT_GROUP
spring.cloud.nacos.config.file-extension：用于配置文件的类型，支持yaml和properties格
式。默认是properties。
spring.cloud.nacos.config.refresh-enabled=false 表示是否开启配置的自动刷新，默认为true表
示开启自动刷新。
配置当前登录nacos的用户名和密码：
spring.cloud.nacos.username=nacos表示配置当前登录的用户名，默认就是nacos
spring.cloud.nacos.passoword=nacos表示配置当前登录的密码，默认就是nacos
如果设置了鉴权：nacos.core.auth.enabled=true，则需要配置上用户名和密码，如果没有
配置鉴权，则不用配置。
3.1.5、创建启动器
 
创建com.baidu包，在该包下创建springboot的启动类
spring:
  cloud:
    nacos:
      config:
        #指定配置中心的位置
        server-addr: 127.0.0.1:8848
        #配置命名空间的id
        namespace: a1706c19-ed58-4336-ae26-538c471f4708
        #配置分组
        group: dev
        #配置文件类型
        file-extension: yml
      #配置当前登录的用户名和密码
      username: nacos
      password: nacos
  #配置DataId
  application:
    name: com.baidu.config-nacos.dev
package com.baidu;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class ConfigNacosApplication8003 {
    public static void main(String[] args) {
        SpringApplication.run(ConfigNacosApplication8003.class, args);
    }
}



=== 第 16 页 ===

测试启动项目，查看端口是否生效
3.1.6、创建控制器
 
创建com.baidu.controller包，在该包下创建控制器TestController，用于测试配置在
com.baidu.config-nacos.dev.yaml文件中的服务端口是否生效
 
3.1.7、测试
 
启动springboot，查看控制台显示 效果：
从结果可以看出配置在application.yml文件中的端口，在启动服务器时没有生效，使用的是
bootstrap.yml文件中的端口，这可以说明bootstrap.yml文件的优先级高于application.yml
文件。
package com.baidu.controller;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
@RequestMapping("/configNacos")
public class TestController {
    @Value("${server.port}")
    private Integer port;
    @Value("${name}")
    private String name;
    @RequestMapping("/test")
    public String test() {
        System.out.println("端口是："+port);
        System.out.println("用户名是："+name);
        return "port:" + port + ",name:" + name;
    }
}



=== 第 17 页 ===

在浏览器中输入http://localhost:7777/configNacos/test请求，可以查看到请求的数据，说
明配置在com.baidu.config-nacos.dev.yaml文件中的端口信息生效了。
查看控制台结果，发现已经读取到了对应的值。
 
3.2、配置服务名称
 
在实际应用过程中，服务名称很可能和DataId名称不同，此时需要手动指定DataId和服务名称。
spring.application.name用于配置DataId
spring.cloud.nacos.discovery.service用于配置服务名称
3.2.1、实现配置
 
配置bootstrap.yml文件。代码如下：
#指明配置中心所在位置
spring:
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        #配置命名空间Id
        namespace: 2af5f326-8ae1-43d8-85e1-1ae20850cabb
        #配置分组
        group: dev
        #配置文件后缀
        file-extension: yml
      #配置登录nacos的账号密码



=== 第 18 页 ===

3.2.2、测试配置
 
启动config-nacos项目，查看控制台输出结果，发现已经读取到了对应的yml文件。
打开nacos的管理平台，查看服务列表，发现服务名称是nacos-config，并不是我们配置的
spring.application.name的名称。
 
 
3.3、配置文件的动态更新
 
如果将spring.cloud.nacos.config.refresh-enabled=true，则当修改配置文件的内容，控制台中
的值也会自动跟着更新，这其实也是nacos的一大优点，系统默认配置的值就是true，如果需要动
态更新的时候，我们可以不做任何配置。
只有在控制器头部加上@RefreshScope注解，这样的情况下，在控制器中通过@Value的方式才能
正常读取到修改之后的值。
3.3.1、实现配置
 
修改bootstrap.yml文件，将自动更新的配置添加进去，代码如下：
      username: nacos
      password: nacos
      #配置服务发现的地址
      discovery:
        server-addr: 127.0.0.1:8848
        #配置服务名称
        service: config-nacos
  #配置DataId
  application:
    name: com.baidu.config-nacos.dev



=== 第 19 页 ===

将spring.cloud.nacos.config.refresh-enabled取值从之前的false，修改成true。
 
3.3.2、修改控制器
 
在控制器的头部加上@RefreshScope注解
 
spring:
  application:
    name: com.baidu.config-nacos.dev
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        namespace: 80e856aa-f147-4a97-a2f1-e8ffa2fe1bbe
        group: dev
        file-extension: yml
        # false为关闭自动刷新,默认是true
        refresh-enabled: true
      password: nacos
      username: nacos
      discovery:
        server-addr: 127.0.0.1:8848
        service: config-nacos
package com.baidu.controller;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
@RefreshScope
@RequestMapping("/configNacos")
public class TestController {
    @Value("${server.port}")
    private Integer port;
    @Value("${name}")
    private String name;
    @RequestMapping("/test")
    public String test() {
        System.out.println("端口是："+port);
        System.out.println("用户名是："+name);
        return "port:" + port + ",name:" + name;
    }
}



=== 第 20 页 ===

3.3.3、测试
 
启动项目前，先查看nacos管理平台上的配置信息
启动config-nacos项目，在浏览器中输入http://localhost:7777/configNacos/test请求，查看页面
显示效果
在不需要重新启动服务器的情况下，进入nacos配置中心，修改配置端口号，然后点击下方的发
布。然后是确认发布。



=== 第 21 页 ===

修改完成以后，刷新浏览器中输入http://localhost:7777/configNacos/test请求，发现请求失败，
但是通过http://localhost:8888/configNacos/test请求，可以发现请求成功了。而且修改后的数据
也读取到了。
有时候通过http://localhost:7777/configNacos/test请求可以访问成功，而http://localhost:
8888/configNacos/test请求却是失败的，但是页面中的数据一定是变成了修改后的结果，出
现这种情况，应该算是nacos的一个小BUG。


